pip install numpy pandas scikit-learn tensorflow gym
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load data
df = pd.read_csv("appointments.csv")

# Feature Engineering
df['delay'] = (pd.to_datetime(df['actual_start_time']) - pd.to_datetime(df['scheduled_time'])).dt.total_seconds() / 60
df['early_arrival'] = (pd.to_datetime(df['checkin_time']) - pd.to_datetime(df['scheduled_time'])).dt.total_seconds() / 60

# Drop invalid rows
df = df.dropna()

# Define Features & Labels
X = df[['doctor_id', 'scheduled_time', 'early_arrival']]
y = df['delay']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Train a Random Forest model to predict appointment delays
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predict delays
y_pred = rf_model.predict(X_test)

# Example usage
def predict_delay(doctor_id, scheduled_time, early_arrival):
    return rf_model.predict([[doctor_id, scheduled_time, early_arrival]])[0]

# Test Example
print(f"Predicted Delay: {predict_delay(5, 18, 15)} minutes")
# Reshape Data for LSTM
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

X_train_lstm = np.reshape(X_train_scaled, (X_train_scaled.shape[0], 1, X_train_scaled.shape[1]))
X_test_lstm = np.reshape(X_test_scaled, (X_test_scaled.shape[0], 1, X_test_scaled.shape[1]))

# Define LSTM Model
lstm_model = Sequential([
    LSTM(50, activation='relu', return_sequences=True, input_shape=(1, X_train_lstm.shape[2])),
    LSTM(50, activation='relu'),
    Dense(1)
])

lstm_model.compile(optimizer='adam', loss='mse')
lstm_model.fit(X_train_lstm, y_train, epochs=10, batch_size=16, verbose=1)

# Predict
def predict_arrival(doctor_id, scheduled_time, early_arrival):
    input_data = scaler.transform([[doctor_id, scheduled_time, early_arrival]])
    input_data = np.reshape(input_data, (1, 1, input_data.shape[1]))
    return lstm_model.predict(input_data)[0][0]

print(f"Predicted Arrival Time Deviation: {predict_arrival(5, 18, 15)} minutes")

import gym
import random

class ClinicEnv(gym.Env):
    def __init__(self):
        self.num_doctors = 15
        self.state = [0] * self.num_doctors  # Each doctor's current workload
        self.action_space = gym.spaces.Discrete(self.num_doctors)
        self.observation_space = gym.spaces.Box(low=0, high=1, shape=(self.num_doctors,), dtype=np.float32)

    def step(self, action):
        reward = -abs(self.state[action] - np.mean(self.state))  # Encourage balance
        self.state[action] += 1  # Assign a new patient
        done = False
        return np.array(self.state), reward, done, {}

    def reset(self):
        self.state = [0] * self.num_doctors
        return np.array(self.state)

env = ClinicEnv()

# Random action to test
state = env.reset()
action = env.action_space.sample()
next_state, reward, done, _ = env.step(action)
print(f"Assigned Doctor: {action}, New State: {next_state}, Reward: {reward}")
